let mix = require('laravel-mix');

const glob = require('glob-all');

// Quick webpack configuration
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
webpackConfig = {
    module: {
        rules: [
            {
                loader: "webpack-modernizr-loader",
                test: /\.modernizrrc\.js$/
            }
        ]
    },
    resolve: {
        alias: {
            modernizr$: path.resolve(__dirname, ".modernizrrc.js")
        }
    },
    plugins: [
        new CleanWebpackPlugin({
            cleanOnceBeforeBuildPatterns: [path.join(__dirname, '/assets/dist/**/*')],
        })
    ]
};

// require('laravel-mix-alias');
// mix.alias({
// });

// js 和 css 处理
require('laravel-mix-purgecss');
mix.setPublicPath('assets')
    .js('assets/resources/js/main.js', 'dist/js').sourceMaps(true, 'source-map')
    .sass('assets/resources/sass/main.scss', 'dist/css').options({ processCssUrls: false })
    .sourceMaps().version()
    .purgeCss({
        paths: () => glob.sync([
            path.join(__dirname, 'assets/resources/**/*.js'),
            path.join(__dirname, 'content/**/*'),
            path.join(__dirname, 'layout/**/*'),
            path.join(__dirname, 'meta/**/*'),
            path.join(__dirname, 'pages/**/*'),
            path.join(__dirname, 'partials/**/*'),
        ], { nodir: true }),
    })

// 压缩图片
// [Automating image optimization](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/automating-image-optimization/)
require('laravel-mix-imagemin');
mix.imagemin(
    [{ from: 'img/**.*', to: 'dist/' }], { context: 'assets/resources/' },
    {
        jpegtran: null, mozjpeg: { progressive: true, quality: 65, },
        optipng: null, pngquant: { quality: '65-90', speed: 4, strip: true },
        gifsicle: { interlaced: false, },
        webp: { quality: 75, }
    }
);

mix.copyDirectory('assets/resources/fonts', 'assets/dist/fonts');
// .copy(['node_modules/mo'])

mix.autoload({
    jquery: ['$', 'jQuery', 'window.jQuery']
});

mix.disableSuccessNotifications();

mix.webpackConfig(webpackConfig);

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
